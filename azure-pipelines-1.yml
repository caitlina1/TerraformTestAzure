# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'terraformFile/*'

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'test'
  azureLocation: 'eastus'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/terraformFile'
  terraformVersion: '0.12.25'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        vmImage: ubuntu-20.04

      steps:
      # Step 1: install Terraform on the Azure Pipelines agent
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 2: run Terraform init to initialize the workspace
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)

      - task: TerraformCLI@0
        displayName: 'terraform plan'
        inputs:
          command: plan
          environmentServiceName: $(serviceConnection)
          commandOptions: -out=$(terraformWorkingDirectory)

      - task: TerraformCLI@0
        displayName: 'terraform show'
        inputs:
          command: show
          environmentServiceName: $(serviceConnection)
          inputTargetPlanOrStateFilePath: $(terraformWorkingDirectory)

      - task: TerraformCLI@0
        displayName: 'terraform apply'
        condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_DESTROY_CHANGES'], 'false'))
        inputs:
          command: apply
          environmentServiceName: $(serviceConnection)
          commandOptions: $(terraformWorkingDirectory)